{
    "Result Pattern": {
        "prefix": "result",
        "body": [
            "public class Result<T>",
            "{",
            "    public bool IsSuccess { get; }",
            "    public T Value { get; }",
            "    public string Error { get; }",
            "    ",
            "    private Result(bool isSuccess, T value, string error)",
            "    {",
            "        IsSuccess = isSuccess;",
            "        Value = value;",
            "        Error = error;",
            "    }",
            "    ",
            "    public static Result<T> Success(T value) => new(true, value, null);",
            "    public static Result<T> Failure(string error) => new(false, default, error);",
            "}"
        ],
        "description": "Result<T> pattern for error handling"
    },
    "Tenant Service": {
        "prefix": "tenantservice",
        "body": [
            "public class ${1:ServiceName} : I${1:ServiceName}",
            "{",
            "    private readonly ITenantContext _tenantContext;",
            "    private readonly ILogger<${1:ServiceName}> _logger;",
            "    ",
            "    public ${1:ServiceName}(ITenantContext tenantContext, ILogger<${1:ServiceName}> logger)",
            "    {",
            "        _tenantContext = tenantContext;",
            "        _logger = logger;",
            "    }",
            "    ",
            "    public async Task<Result<${2:ReturnType}>> ${3:MethodName}Async(${4:parameters})",
            "    {",
            "        try",
            "        {",
            "            _logger.LogInformation(\"Processing ${3:MethodName} for tenant {TenantId}\", _tenantContext.TenantId);",
            "            ",
            "            ${5:// Implementation}",
            "            ",
            "            return Result<${2:ReturnType}>.Success(${6:result});",
            "        }",
            "        catch (Exception ex)",
            "        {",
            "            _logger.LogError(ex, \"Error processing ${3:MethodName} for tenant {TenantId}\", _tenantContext.TenantId);",
            "            return Result<${2:ReturnType}>.Failure(\"An error occurred while processing the request.\");",
            "        }",
            "    }",
            "}"
        ],
        "description": "Tenant-aware service with Result pattern"
    },
    "Repository with Tenant": {
        "prefix": "tenantrepo",
        "body": [
            "public class ${1:EntityName}Repository : I${1:EntityName}Repository",
            "{",
            "    private readonly CoreDbContext _context;",
            "    private readonly ITenantContext _tenantContext;",
            "    private readonly ILogger<${1:EntityName}Repository> _logger;",
            "    ",
            "    public ${1:EntityName}Repository(CoreDbContext context, ITenantContext tenantContext, ILogger<${1:EntityName}Repository> logger)",
            "    {",
            "        _context = context;",
            "        _tenantContext = tenantContext;",
            "        _logger = logger;",
            "    }",
            "    ",
            "    public async Task<${1:EntityName}> GetByIdAsync(${2:IdType} id, CancellationToken cancellationToken = default)",
            "    {",
            "        return await _context.${1:EntityName}s",
            "            .Where(x => x.Id == id && x.TenantId == _tenantContext.TenantId)",
            "            .FirstOrDefaultAsync(cancellationToken);",
            "    }",
            "    ",
            "    public async Task<IEnumerable<${1:EntityName}>> GetAllAsync(CancellationToken cancellationToken = default)",
            "    {",
            "        return await _context.${1:EntityName}s",
            "            .Where(x => x.TenantId == _tenantContext.TenantId)",
            "            .ToListAsync(cancellationToken);",
            "    }",
            "    ",
            "    public async Task<${1:EntityName}> AddAsync(${1:EntityName} entity, CancellationToken cancellationToken = default)",
            "    {",
            "        entity.TenantId = _tenantContext.TenantId;",
            "        _context.${1:EntityName}s.Add(entity);",
            "        await _context.SaveChangesAsync(cancellationToken);",
            "        return entity;",
            "    }",
            "    ",
            "    public async Task UpdateAsync(${1:EntityName} entity, CancellationToken cancellationToken = default)",
            "    {",
            "        _context.${1:EntityName}s.Update(entity);",
            "        await _context.SaveChangesAsync(cancellationToken);",
            "    }",
            "    ",
            "    public async Task DeleteAsync(${2:IdType} id, CancellationToken cancellationToken = default)",
            "    {",
            "        var entity = await GetByIdAsync(id, cancellationToken);",
            "        if (entity != null)",
            "        {",
            "            _context.${1:EntityName}s.Remove(entity);",
            "            await _context.SaveChangesAsync(cancellationToken);",
            "        }",
            "    }",
            "}"
        ],
        "description": "Repository with tenant isolation"
    },
    "Unit Test AAA": {
        "prefix": "testaaa",
        "body": [
            "[Fact]",
            "public async Task ${1:MethodName}_${2:Scenario}_Should${3:ExpectedResult}()",
            "{",
            "    // Arrange",
            "    ${4:// Setup test data and mocks}",
            "    ",
            "    // Act",
            "    ${5:// Execute the method under test}",
            "    ",
            "    // Assert",
            "    ${6:// Verify the results}",
            "}"
        ],
        "description": "Unit test with AAA pattern"
    },
    "Controller with Tenant": {
        "prefix": "tenantcontroller",
        "body": [
            "[ApiController]",
            "[Route(\"api/[controller]\")]",
            "public class ${1:ControllerName}Controller : ControllerBase",
            "{",
            "    private readonly I${1:ControllerName}Service _service;",
            "    private readonly ITenantContext _tenantContext;",
            "    private readonly ILogger<${1:ControllerName}Controller> _logger;",
            "    ",
            "    public ${1:ControllerName}Controller(I${1:ControllerName}Service service, ITenantContext tenantContext, ILogger<${1:ControllerName}Controller> logger)",
            "    {",
            "        _service = service;",
            "        _tenantContext = tenantContext;",
            "        _logger = logger;",
            "    }",
            "    ",
            "    [HttpGet]",
            "    public async Task<ActionResult<IEnumerable<${2:DtoType}>>> GetAllAsync()",
            "    {",
            "        var result = await _service.GetAllAsync();",
            "        if (!result.IsSuccess)",
            "        {",
            "            return Problem(result.Error);",
            "        }",
            "        ",
            "        return Ok(result.Value);",
            "    }",
            "    ",
            "    [HttpGet(\"{id}\")]",
            "    public async Task<ActionResult<${2:DtoType}>> GetByIdAsync(${3:IdType} id)",
            "    {",
            "        var result = await _service.GetByIdAsync(id);",
            "        if (!result.IsSuccess)",
            "    {",
            "            return Problem(result.Error);",
            "        }",
            "        ",
            "        return Ok(result.Value);",
            "    }",
            "    ",
            "    [HttpPost]",
            "    public async Task<ActionResult<${2:DtoType}>> CreateAsync([FromBody] ${4:CreateDtoType} dto)",
            "    {",
            "        var result = await _service.CreateAsync(dto);",
            "        if (!result.IsSuccess)",
            "        {",
            "            return Problem(result.Error);",
            "        }",
            "        ",
            "        return CreatedAtAction(nameof(GetByIdAsync), new { id = result.Value.Id }, result.Value);",
            "    }",
            "}"
        ],
        "description": "API Controller with tenant context and Result pattern"
    },
    "Seasonal Service": {
        "prefix": "seasonal",
        "body": [
            "public enum Season",
            "{",
            "    Spring,",
            "    Summer,",
            "    Fall,",
            "    Winter",
            "}",
            "",
            "public class SeasonalService",
            "{",
            "    public static Season GetCurrentSeason()",
            "    {",
            "        var month = DateTime.Now.Month;",
            "        return month switch",
            "        {",
            "            >= 3 and <= 5 => Season.Spring,",
            "            >= 6 and <= 8 => Season.Summer,",
            "            >= 9 and <= 11 => Season.Fall,",
            "            _ => Season.Winter",
            "        };",
            "    }",
            "    ",
            "    public static bool IsServiceAvailable(string serviceType, Season season)",
            "    {",
            "        return serviceType switch",
            "        {",
            "            \"Lawn Mowing\" => season is Season.Spring or Season.Summer or Season.Fall,",
            "            \"Snow Removal\" => season is Season.Winter,",
            "            \"Leaf Cleanup\" => season is Season.Fall,",
            "            \"Spring Cleanup\" => season is Season.Spring,",
            "            \"Fertilization\" => season is Season.Spring or Season.Fall,",
            "            _ => true",
            "        };",
            "    }",
            "}"
        ],
        "description": "Seasonal service logic for lawn care"
    },
    "Equipment Management": {
        "prefix": "equipment",
        "body": [
            "public class Equipment",
            "{",
            "    public Guid Id { get; set; }",
            "    public string Name { get; set; } = string.Empty;",
            "    public string Type { get; set; } = string.Empty;",
            "    public string SerialNumber { get; set; } = string.Empty;",
            "    public DateTime LastMaintenanceDate { get; set; }",
            "    public DateTime NextMaintenanceDate { get; set; }",
            "    public int MaintenanceIntervalDays { get; set; }",
            "    public bool IsAvailable { get; set; } = true;",
            "    public Guid TenantId { get; set; }",
            "    ",
            "    public bool NeedsMaintenance()",
            "    {",
            "        return DateTime.Now >= NextMaintenanceDate;",
            "    }",
            "    ",
            "    public void ScheduleMaintenance(int daysFromNow)",
            "    {",
            "        NextMaintenanceDate = DateTime.Now.AddDays(daysFromNow);",
            "        LastMaintenanceDate = DateTime.Now;",
            "    }",
            "}"
        ],
        "description": "Equipment management entity"
    }
}