// <auto-generated />
using System;
using JobService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LawnCare.JobApi.Migrations
{
    [DbContext(typeof(JobDbContext))]
    [Migration("20250807203923_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LawnCare.JobApi.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActualCost")
                        .HasColumnType("text")
                        .HasColumnName("actual_cost");

                    b.Property<Guid?>("AssignedTechnicianId")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_technician_id");

                    b.Property<DateTimeOffset?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date")
                        .HasComment("Date job was completed");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Timestamp when job was created");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("customer_name")
                        .HasComment("Name of the customer for this job");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description")
                        .HasComment("Detailed description of the work to be performed");

                    b.Property<string>("EstimatedCost")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estimated_cost");

                    b.Property<long>("EstimatedDuration")
                        .HasColumnType("bigint")
                        .HasColumnName("estimated_duration");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("priority");

                    b.Property<DateTimeOffset>("RequestedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_date")
                        .HasComment("Date requested by customer");

                    b.Property<DateTimeOffset?>("ScheduledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_date")
                        .HasComment("Date scheduled for technician");

                    b.Property<string>("ServiceAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("service_address");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("special_instructions")
                        .HasComment("Special instructions from customer or management");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Timestamp when job was last updated");

                    b.HasKey("JobId")
                        .HasName("pk_jobs");

                    b.HasIndex("AssignedTechnicianId")
                        .HasDatabaseName("IX_Jobs_AssignedTechnicianId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Jobs_CreatedAt");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Jobs_CustomerId");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Jobs_Priority");

                    b.HasIndex("RequestedDate")
                        .HasDatabaseName("IX_Jobs_RequestedDate");

                    b.HasIndex("ScheduledDate")
                        .HasDatabaseName("IX_Jobs_ScheduledDate");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Jobs_Status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Jobs_TenantId");

                    b.HasIndex("TenantId", "CustomerId")
                        .HasDatabaseName("IX_Jobs_TenantId_CustomerId");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("IX_Jobs_TenantId_Status");

                    b.HasIndex("TenantId", "AssignedTechnicianId", "ScheduledDate")
                        .HasDatabaseName("IX_Jobs_TenantId_TechnicianId_ScheduledDate");

                    b.ToTable("Jobs", "JobService", t =>
                        {
                            t.HasCheckConstraint("CK_Jobs_CompletedDate_Future", "\"completed_date\" IS NULL OR \"completed_date\" >= \"created_at\"");

                            t.HasCheckConstraint("CK_Jobs_ScheduledDate_Future", "\"scheduled_date\" IS NULL OR \"scheduled_date\" >= \"created_at\"");
                        });
                });

            modelBuilder.Entity("LawnCare.JobApi.Domain.Entities.JobNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("author")
                        .HasComment("Author of the note (technician, customer, system, etc.)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("content")
                        .HasComment("Content of the note");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .HasComment("Timestamp when note was created");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id")
                        .HasComment("Foreign key to the Job");

                    b.HasKey("Id")
                        .HasName("pk_job_notes");

                    b.HasIndex("Author")
                        .HasDatabaseName("IX_JobNotes_Author");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_JobNotes_CreatedAt");

                    b.HasIndex("JobId")
                        .HasDatabaseName("IX_JobNotes_JobId");

                    b.ToTable("JobNotes", "JobService");
                });

            modelBuilder.Entity("LawnCare.JobApi.Domain.Entities.JobServiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("comment")
                        .HasComment("Optional comment about the service");

                    b.Property<bool>("IsFulfilled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_fulfilled")
                        .HasComment("Whether this service has been fulfilled");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id")
                        .HasComment("Foreign key to the Job");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("price")
                        .HasComment("Price per unit of service");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("quantity")
                        .HasComment("Quantity of service provided");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("service_name")
                        .HasComment("Name of the service provided");

                    b.HasKey("Id")
                        .HasName("pk_job_service_items");

                    b.HasIndex("IsFulfilled")
                        .HasDatabaseName("IX_JobServiceItems_IsFulfilled");

                    b.HasIndex("JobId")
                        .HasDatabaseName("IX_JobServiceItems_JobId");

                    b.HasIndex("ServiceName")
                        .HasDatabaseName("IX_JobServiceItems_ServiceName");

                    b.ToTable("JobServiceItems", "JobService");
                });

            modelBuilder.Entity("LawnCare.JobApi.Domain.Entities.JobNote", b =>
                {
                    b.HasOne("LawnCare.JobApi.Domain.Entities.Job", null)
                        .WithMany("Notes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobNotes_Job");
                });

            modelBuilder.Entity("LawnCare.JobApi.Domain.Entities.JobServiceItem", b =>
                {
                    b.HasOne("LawnCare.JobApi.Domain.Entities.Job", null)
                        .WithMany("ServiceItems")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobRequirements_Job");
                });

            modelBuilder.Entity("LawnCare.JobApi.Domain.Entities.Job", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("ServiceItems");
                });
#pragma warning restore 612, 618
        }
    }
}
