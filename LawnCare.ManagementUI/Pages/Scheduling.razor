@page "/scheduling"
@attribute [Authorize]
@using LawnCare.ManagementUI.Models
@using LawnCare.ManagementUI.Services
@inject ISchedulingService SchedulingService
@inject ILogger<Scheduling> Logger
@inject NavigationManager NavigationManager

<PageTitle>Scheduling - Lawn Care Management</PageTitle>

<div class="scheduling-dashboard">
    <div class="dashboard-header">
        <div class="header-content">
            <h1 class="page-title">Scheduling Dashboard</h1>
            <p class="page-subtitle">Manage your upcoming lawn care appointments and service requests</p>
        </div>
        <div class="header-actions">
            <button class="btn btn-primary" @onclick="ShowNewJobModal">
                <span class="btn-icon">‚ûï</span>
                Schedule New Job
            </button>
        </div>
    </div>

    <div class="filters-section">
        <div class="filter-group">
            <label class="filter-label">Filter by Status:</label>
            <select class="filter-select" @bind="selectedStatus" @bind:after="FilterJobs">
                <option value="">All Statuses</option>
                <option value="@JobStatus.Scheduled">Scheduled</option>
                <option value="@JobStatus.InProgress">In Progress</option>
                <option value="@JobStatus.Completed">Completed</option>
                <option value="@JobStatus.Cancelled">Cancelled</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label class="filter-label">Filter by Date:</label>
            <input type="date" class="filter-input" @bind="selectedDate" @bind:after="FilterJobs" />
        </div>
        
        <div class="filter-group">
            <label class="filter-label">Search:</label>
            <input type="text" class="filter-input" placeholder="Search jobs..." @bind="searchTerm" @oninput="FilterJobs" />
        </div>
    </div>

    <div class="jobs-container">
        @if (isLoading)
        {
            <div class="loading-state">
                <div class="loading-spinner"></div>
                <p>Loading jobs...</p>
            </div>
        }
        else if (filteredJobs.Any())
        {
            <div class="jobs-grid">
                @foreach (var job in filteredJobs)
                {
                    <div class="job-card" @onclick="() => ShowJobDetails(job.Id)">
                        <div class="job-header">
                            <div class="service-type">
                                <span class="service-icon">@GetServiceIcon(job.ServiceType)</span>
                                <span class="service-name">@job.ServiceType</span>
                            </div>
                            <div class="job-status status-@job.Status.ToLower().Replace(" ", "-")">
                                @job.Status
                            </div>
                        </div>
                        
                        <div class="job-content">
                            <div class="customer-info">
                                <h3 class="customer-name">@job.CustomerName</h3>
                                <p class="property-address">@job.PropertyAddress</p>
                            </div>
                            
                            <div class="job-details">
                                <div class="detail-item">
                                    <span class="detail-label">üìÖ Date:</span>
                                    <span class="detail-value">@job.ScheduledDate.ToString("MMM dd, yyyy")</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">üïê Time:</span>
                                    <span class="detail-value">@DateTime.Today.Add(job.ScheduledTime).ToString("h:mm tt")</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">‚è±Ô∏è Duration:</span>
                                    <span class="detail-value">@job.EstimatedDuration.ToString(@"h\:mm")</span>
                                </div>
                                <div class="detail-item">
                                    <span class="detail-label">üë∑ Technician:</span>
                                    <span class="detail-value">@job.AssignedTechnician</span>
                                </div>
                            </div>
                            
                            <div class="job-footer">
                                <div class="priority-badge priority-@job.Priority.ToLower()">
                                    @job.Priority
                                </div>
                                <div class="cost-info">
                                    $@job.EstimatedCost.ToString("F2")
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">üìÖ</div>
                <h3>No jobs found</h3>
                <p>No jobs match your current filters. Try adjusting your search criteria.</p>
                <button class="btn btn-primary" @onclick="ClearFilters">Clear Filters</button>
            </div>
        }
    </div>
</div>

@if (showJobModal)
{
    <JobDetailModal JobId="(Guid)selectedJobId!" OnClose="CloseJobModal" />
}

@if (showNewJobModal)
{
    <NewJobModal IsVisible="showNewJobModal" OnClose="CloseNewJobModal" OnJobCreated="HandleJobCreated" />
}

@code {
	
    private List<ServiceRequest> filteredJobs = new();
    private bool isLoading = true;
    private bool showJobModal = false;
    private bool showNewJobModal = false;
    private Guid? selectedJobId = Guid.Empty;
    
    private string selectedStatus = "";
    private DateTime? selectedDate;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadJobs();
    }

    private async Task LoadJobs()
    {
        await FilterJobs();
    }

    private async Task FilterJobs()
    {
        isLoading = true;
        
        try
        {
            // Use server-side filtering with the new unified search
            filteredJobs = await SchedulingService.SearchJobsAsync(
                status: string.IsNullOrEmpty(selectedStatus) ? null : selectedStatus,
                date: selectedDate,
                upcoming: true // Always get upcoming jobs for the scheduling dashboard
            );

            // Apply client-side text search since it's not supported by the API yet
            if (!string.IsNullOrEmpty(searchTerm))
            {
                var term = searchTerm.ToLower();
                filteredJobs = filteredJobs.Where(job => 
                    job.CustomerName.ToLower().Contains(term) ||
                    job.PropertyAddress.ToLower().Contains(term) ||
                    job.ServiceType.ToLower().Contains(term) ||
                    job.AssignedTechnician.ToLower().Contains(term)).ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error filtering jobs");
            filteredJobs = new List<ServiceRequest>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowJobDetails(Guid jobId)
    {
        NavigationManager.NavigateTo($"/jobs/edit/{jobId}");
    }

    private void CloseJobModal()
    {
        showJobModal = false;
        selectedJobId = null;
    }

    private void ShowNewJobModal()
    {
        showNewJobModal = true;
    }

    private void CloseNewJobModal()
    {
        showNewJobModal = false;
    }

    private async Task HandleJobCreated(JobEstimate jobEstimate)
    {
        try
        {
            Logger.LogInformation("Creating job estimate for customer: {FirstName} {LastName}", jobEstimate.CustomerFirstName, jobEstimate.CustomerLastName);
            var newJob = await SchedulingService.CreateJobEstimateAsync(jobEstimate);
            Logger.LogInformation("Job created successfully with ID: {JobId}", newJob.Id);
            await LoadJobs(); // Refresh the jobs list
            showNewJobModal = false;
        }
        catch (Exception ex)
        {
            // Handle error - could show a toast notification
            Logger.LogError(ex, "Error creating job for customer {FirstName} {LastName}", jobEstimate.CustomerFirstName, jobEstimate.CustomerLastName);
            // Keep the modal open so user can see the error and try again
        }
    }

    private async Task ClearFilters()
    {
        selectedStatus = "";
        selectedDate = null;
        searchTerm = "";
        await FilterJobs();
    }

    private string GetServiceIcon(string serviceType)
    {
        return serviceType switch
        {
            "Lawn Mowing" => "üå±",
            "Tree Pruning" => "üå≥",
            "Fertilization" => "üåø",
            "Weed Control" => "üåæ",
            "Leaf Cleanup" => "üçÇ",
            "Snow Removal" => "‚ùÑÔ∏è",
            "Aeration" => "üï≥Ô∏è",
            "Pest Control" => "üêõ",
            _ => "üîß"
        };
    }
}