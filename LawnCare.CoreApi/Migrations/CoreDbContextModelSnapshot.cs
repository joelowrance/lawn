// <auto-generated />
using System;
using System.Collections.Generic;
using LawnCare.CoreApi.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LawnCare.CoreApi.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    partial class CoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LawnCare.CoreApi.Domain.Entities.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("JobId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("priority");

                    b.Property<DateTimeOffset?>("RequestedServiceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("requested_service_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("JobCost", "LawnCare.CoreApi.Domain.Entities.Job.JobCost#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("JobCostAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)")
                                .HasDefaultValue("USD")
                                .HasColumnName("JobCostCurrency");
                        });

                    b.HasKey("JobId")
                        .HasName("pk_jobs");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Jobs_Priority");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Jobs_Status");

                    b.ToTable("Jobs", "public");
                });

            modelBuilder.Entity("LawnCare.CoreApi.Domain.Entities.JobLineItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment")
                        .HasComment("Any additional comments");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("is_complete");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<decimal>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(1m)
                        .HasColumnName("quantity")
                        .HasComment("The quantity of the service");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("service_name")
                        .HasComment("The name of the service");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.ComplexProperty<Dictionary<string, object>>("Price", "LawnCare.CoreApi.Domain.Entities.JobLineItem.Price#Money", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("numeric(18,2)")
                                .HasColumnName("Amount")
                                .HasComment("The price of the service");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)")
                                .HasDefaultValue("USD")
                                .HasColumnName("price_currency")
                                .HasComment("The currency of the price");
                        });

                    b.HasKey("Id")
                        .HasName("pk_job_line_items");

                    b.HasIndex("JobId")
                        .HasDatabaseName("IX_JobServiceItems_JobId");

                    b.ToTable("JobLineItems", "public");
                });

            modelBuilder.Entity("LawnCare.CoreApi.Domain.Entities.JobNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid")
                        .HasColumnName("job_id");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(-1)
                        .HasColumnType("text")
                        .HasColumnName("note")
                        .HasComment("The note");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_job_notes");

                    b.HasIndex("JobId")
                        .HasDatabaseName("IX_JobNotes_JobId");

                    b.ToTable("JobNotes", "public");
                });

            modelBuilder.Entity("LawnCare.CoreApi.Domain.Entities.JobLineItem", b =>
                {
                    b.HasOne("LawnCare.CoreApi.Domain.Entities.Job", null)
                        .WithMany("ServiceItems")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobLineItems_Job");
                });

            modelBuilder.Entity("LawnCare.CoreApi.Domain.Entities.JobNote", b =>
                {
                    b.HasOne("LawnCare.CoreApi.Domain.Entities.Job", null)
                        .WithMany("Notes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobNotes_Job");
                });

            modelBuilder.Entity("LawnCare.CoreApi.Domain.Entities.Job", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("ServiceItems");
                });
#pragma warning restore 612, 618
        }
    }
}
